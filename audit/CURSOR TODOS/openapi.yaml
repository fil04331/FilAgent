openapi: 3.0.3
info:
  title: FilAgent API
  version: 0.1.0
  description: |
    **FilAgent** - Agent LLM avec Gouvernance, Tra√ßabilit√© et Conformit√© L√©gale Compl√®te
    
    ## üéØ Architecture de Conformit√©
    
    FilAgent impl√©mente une stack de conformit√© multi-niveaux pour respecter:
    - **Loi 25 (Qu√©bec)** - Transparence des d√©cisions automatis√©es (ADM)
    - **RGPD (UE)** - Protection des donn√©es personnelles
    - **AI Act (UE)** - Exigences de tra√ßabilit√© et transparence
    - **NIST AI RMF 1.0** - Cadre de gestion des risques de l'IA
    
    ## üîí Middlewares de Conformit√©
    
    Chaque requ√™te traverse automatiquement:
    1. **EventLogger** - Journalisation JSONL compatible OpenTelemetry
    2. **WormLogger** - Logs append-only avec arbre de Merkle pour int√©grit√©
    3. **DRManager** - G√©n√©ration de Decision Records sign√©s EdDSA
    4. **ProvenanceTracker** - M√©tadonn√©es W3C PROV-JSON pour tra√ßabilit√© compl√®te
    5. **PIIRedactor** - Masquage automatique des donn√©es sensibles
    6. **ConstraintsEngine** - Validation des sorties selon guardrails configur√©s
    
    ## üõ†Ô∏è Capacit√©s Agentiques
    
    - **Raisonnement multi-√©tapes** (max 10 iterations)
    - **Appels d'outils automatiques** (Python sandbox, file reader, calculator)
    - **M√©moire conversationnelle** persistante (SQLite)
    - **M√©moire s√©mantique** avec recherche vectorielle (FAISS)
    
    ## üìä Observabilit√©
    
    - Logs structur√©s JSONL avec trace_id/span_id
    - Decision Records pour chaque action significative
    - Provenance compl√®te des artefacts g√©n√©r√©s
    - M√©triques d'usage (tokens, latence, outils utilis√©s)
    
  contact:
    name: FilAgent Support
    url: https://github.com/fil04331/FilAgent
  license:
    name: Proprietary
    url: https://github.com/fil04331/FilAgent

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.filagent.example.com
    description: Production server (example)

tags:
  - name: chat
    description: Endpoints de conversation avec l'agent
  - name: health
    description: Endpoints de sant√© et monitoring
  - name: memory
    description: Endpoints de gestion de la m√©moire
  - name: compliance
    description: Endpoints de conformit√© et audit

paths:
  /:
    get:
      summary: Health check basique
      description: |
        Endpoint l√©ger pour v√©rifier que le service r√©pond.
        Utilis√© par les load balancers et monitoring basique.
      operationId: root_health_check
      tags:
        - health
      responses:
        '200':
          description: Service op√©rationnel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicHealthResponse'
              example:
                service: FilAgent
                version: "0.1.0"
                status: running

  /health:
    get:
      summary: Health check d√©taill√©
      description: |
        V√©rification approfondie de tous les composants critiques:
        - **Model**: Mod√®le LLM charg√© et fonctionnel
        - **Database**: Connexion SQLite pour m√©moire √©pisodique
        - **Logging**: Syst√®me de journalisation JSONL + WORM
        
        **Status possible:**
        - `healthy`: Tous les composants op√©rationnels
        - `degraded`: Au moins un composant d√©faillant
        
        **Note de conformit√©**: Ce endpoint ne cr√©e JAMAIS de ressources (read-only).
        Les checks de logging v√©rifient l'existence des directories sans les cr√©er.
      operationId: detailed_health_check
      tags:
        - health
      responses:
        '200':
          description: Health check r√©ussi (peut √™tre degraded)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
              examples:
                healthy:
                  summary: Tous les composants op√©rationnels
                  value:
                    status: healthy
                    timestamp: "2025-10-27T21:39:00.000Z"
                    components:
                      model: true
                      database: true
                      logging: true
                degraded:
                  summary: Un composant d√©faillant
                  value:
                    status: degraded
                    timestamp: "2025-10-27T21:39:00.000Z"
                    components:
                      model: false
                      database: true
                      logging: true

  /chat:
    post:
      summary: Conversation avec l'agent
      description: |
        Endpoint principal pour interagir avec l'agent LLM.
        
        ## üîÑ Flux de Traitement
        
        1. **Validation** des messages et param√®tres
        2. **R√©cup√©ration** du contexte conversationnel (m√©moire √©pisodique)
        3. **G√©n√©ration** via mod√®le LLM avec parsing tool calls
        4. **Ex√©cution** automatique des outils si d√©tect√©s
        5. **Logging** complet (events, DR, provenance)
        6. **Retour** de la r√©ponse avec m√©tadonn√©es
        
        ## üõ°Ô∏è Conformit√© Automatique
        
        Pour chaque requ√™te:
        - ‚úÖ **Event log** `conversation.start` avec trace_id
        - ‚úÖ **Event logs** `tool.call` pour chaque outil utilis√©
        - ‚úÖ **Decision Record** si outils utilis√©s ou actions significatives
        - ‚úÖ **Provenance PROV-JSON** pour tra√ßabilit√© compl√®te
        - ‚úÖ **Event log** `conversation.end` avec m√©triques
        
        ## üîí S√©curit√©
        
        - **PII Redaction**: Masquage automatique avant logging
        - **Guardrails**: Validation des sorties selon `policies.yaml`
        - **Sandboxing**: Ex√©cution isol√©e des outils (quotas CPU/m√©moire)
        - **RBAC**: Permissions v√©rifi√©es selon r√¥le utilisateur
        
        ## üìä M√©triques Retourn√©es
        
        - **tokens**: prompt_tokens, completion_tokens, total_tokens
        - **tools_used**: Liste des outils ex√©cut√©s
        - **iterations**: Nombre de tours de raisonnement
        - **conversation_id**: ID pour r√©cup√©ration historique
      operationId: chat_with_agent
      tags:
        - chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              simple_question:
                summary: Question simple sans outils
                value:
                  messages:
                    - role: user
                      content: "Explique-moi comment fonctionne un arbre de Merkle"
                  conversation_id: "conv-12345"
              
              tool_usage:
                summary: Requ√™te n√©cessitant un outil (calcul)
                value:
                  messages:
                    - role: user
                      content: "Calcule la factorielle de 10"
                  conversation_id: "conv-67890"
                  task_id: "task-calc-001"
              
              multi_turn:
                summary: Conversation multi-tours avec contexte
                value:
                  messages:
                    - role: user
                      content: "√âcris un script Python pour lire un fichier CSV"
                    - role: assistant
                      content: "Voici un script Python pour lire un fichier CSV..."
                    - role: user
                      content: "Maintenant ajoute le traitement des erreurs"
                  conversation_id: "conv-11111"
              
              with_custom_params:
                summary: Avec param√®tres personnalis√©s
                value:
                  messages:
                    - role: user
                      content: "G√©n√®re du code cr√©atif"
                  conversation_id: "conv-22222"
                  temperature: 0.8
                  max_tokens: 1000
      
      responses:
        '200':
          description: R√©ponse de l'agent g√©n√©r√©e avec succ√®s
          headers:
            X-Trace-ID:
              description: Trace ID pour debugging (correspond au trace_id dans les logs)
              schema:
                type: string
                example: "9b1d1f2a3c4d5e6f"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              examples:
                simple_response:
                  summary: R√©ponse textuelle simple
                  value:
                    id: "chatcmpl-1698438000"
                    object: "chat.completion"
                    created: 1698438000
                    model: "llama-3"
                    choices:
                      - index: 0
                        message:
                          role: assistant
                          content: "Un arbre de Merkle est une structure de donn√©es cryptographique utilis√©e pour v√©rifier l'int√©grit√© de grands ensembles de donn√©es..."
                        finish_reason: stop
                    usage:
                      prompt_tokens: 25
                      completion_tokens: 150
                      total_tokens: 175
                
                with_tools:
                  summary: R√©ponse avec utilisation d'outils
                  value:
                    id: "chatcmpl-1698438100"
                    object: "chat.completion"
                    created: 1698438100
                    model: "llama-3"
                    choices:
                      - index: 0
                        message:
                          role: assistant
                          content: "J'ai calcul√© la factorielle de 10 en utilisant l'outil Python sandbox. Le r√©sultat est 3,628,800."
                        finish_reason: stop
                        tools_used:
                          - python_sandbox
                    usage:
                      prompt_tokens: 30
                      completion_tokens: 80
                      total_tokens: 110
        
        '400':
          description: Requ√™te invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no_user_message:
                  summary: Aucun message utilisateur fourni
                  value:
                    detail: "No user message provided"
                invalid_format:
                  summary: Format de message invalide
                  value:
                    detail: "Invalid message format: 'role' and 'content' required"
        
        '500':
          description: Erreur serveur interne
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                agent_error:
                  summary: Erreur lors de la g√©n√©ration
                  value:
                    detail: "Agent error: Generation timeout after 60s"
                model_error:
                  summary: Mod√®le non disponible
                  value:
                    detail: "Failed to initialize agent: Model not loaded"

  /conversations/{conversation_id}:
    get:
      summary: R√©cup√©rer l'historique d'une conversation
      description: |
        Retourne tous les messages d'une conversation persist√©s en m√©moire √©pisodique.
        
        ## üì¶ Contenu Retourn√©
        
        - **messages**: Liste compl√®te des √©changes (user + assistant)
        - **metadata**: Informations par message (timestamp, task_id, type)
        - **TTL**: Les conversations sont conserv√©es selon `retention.yaml` (d√©faut: 30 jours)
        
        ## üîí Conformit√©
        
        - **PII**: Les donn√©es sensibles sont redact√©es avant stockage
        - **RBAC**: V√©rification que l'utilisateur a acc√®s √† cette conversation
        - **Audit**: Acc√®s logu√© dans les √©v√©nements
        
        ## üí° Cas d'usage
        
        - **Reprise de conversation**: Recharger le contexte pour continuer
        - **Audit**: Inspection des √©changes pour conformit√©
        - **Export**: Extraction des donn√©es pour portabilit√© (RGPD)
      operationId: get_conversation_history
      tags:
        - memory
      parameters:
        - name: conversation_id
          in: path
          required: true
          description: Identifiant unique de la conversation
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\-_]+$'
          example: "conv-12345"
      
      responses:
        '200':
          description: Historique de conversation r√©cup√©r√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationHistory'
              examples:
                simple_conversation:
                  summary: Conversation simple avec 2 tours
                  value:
                    conversation_id: "conv-12345"
                    messages:
                      - role: user
                        content: "Bonjour, peux-tu m'aider ?"
                        timestamp: "2025-10-27T21:30:00.000Z"
                        message_type: text
                        metadata: {}
                      - role: assistant
                        content: "Bonjour ! Bien s√ªr, comment puis-je vous aider ?"
                        timestamp: "2025-10-27T21:30:02.000Z"
                        message_type: text
                        metadata:
                          tokens_used: 25
                
                with_task_ids:
                  summary: Conversation avec task_id tracking
                  value:
                    conversation_id: "conv-67890"
                    messages:
                      - role: user
                        content: "Analyse ce document"
                        task_id: "task-001"
                        timestamp: "2025-10-27T21:35:00.000Z"
                        message_type: text
                      - role: assistant
                        content: "J'ai analys√© le document. Voici les points cl√©s..."
                        task_id: "task-001"
                        timestamp: "2025-10-27T21:35:15.000Z"
                        message_type: text
                        metadata:
                          tools_used: ["file_read"]
        
        '404':
          description: Conversation non trouv√©e
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Conversation not found"

components:
  schemas:
    # ==================== Request/Response Schemas ====================
    
    Message:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant, system]
          description: |
            R√¥le de l'√©metteur du message:
            - `user`: Message de l'utilisateur
            - `assistant`: R√©ponse de l'agent
            - `system`: Instructions syst√®me (rarement utilis√©)
          example: user
        content:
          type: string
          description: Contenu textuel du message
          minLength: 1
          maxLength: 50000
          example: "Explique-moi la th√©orie de la relativit√©"
      example:
        role: user
        content: "Quelle est la diff√©rence entre un arbre B et un arbre B+ ?"
    
    ChatRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          description: |
            Historique de la conversation. L'agent utilisera tous les messages
            pour construire le contexte, mais seul le dernier message `user`
            d√©clenchera une nouvelle g√©n√©ration.
          items:
            $ref: '#/components/schemas/Message'
          minItems: 1
          maxItems: 100
        
        conversation_id:
          type: string
          description: |
            Identifiant unique de la conversation pour persistance en m√©moire.
            Si omis, un ID sera g√©n√©r√© automatiquement.
            **Format recommand√©**: `conv-{timestamp}` ou UUID
          pattern: '^[a-zA-Z0-9\-_]+$'
          example: "conv-1698438000"
        
        task_id:
          type: string
          description: |
            Identifiant optionnel de la t√¢che pour tracking granulaire.
            Utilis√© pour lier les Decision Records et la provenance.
          pattern: '^[a-zA-Z0-9\-_]+$'
          example: "task-analysis-001"
        
        model:
          type: string
          description: |
            Nom du mod√®le √† utiliser (compatibilit√© OpenAI).
            **Note**: Actuellement ignor√©, le mod√®le est configur√© via `config/agent.yaml`
          example: "llama-3"
        
        temperature:
          type: number
          format: float
          description: |
            Temp√©rature de g√©n√©ration (0.0 = d√©terministe, 2.0 = tr√®s cr√©atif).
            **Override**: Remplace temporairement `config/agent.yaml`
          minimum: 0.0
          maximum: 2.0
          example: 0.2
        
        max_tokens:
          type: integer
          description: |
            Nombre maximum de tokens √† g√©n√©rer.
            **Override**: Remplace temporairement `config/agent.yaml`
          minimum: 1
          maximum: 10000
          example: 800
      
      example:
        messages:
          - role: user
            content: "√âcris un algorithme de tri rapide en Python"
        conversation_id: "conv-12345"
        task_id: "task-quicksort"
        temperature: 0.2
    
    ChatResponse:
      type: object
      required:
        - id
        - object
        - created
        - model
        - choices
        - usage
      properties:
        id:
          type: string
          description: Identifiant unique de la completion
          example: "chatcmpl-1698438000"
        
        object:
          type: string
          enum: [chat.completion]
          description: Type d'objet retourn√© (compatibilit√© OpenAI)
          example: "chat.completion"
        
        created:
          type: integer
          format: int64
          description: Timestamp Unix de la cr√©ation
          example: 1698438000
        
        model:
          type: string
          description: Nom du mod√®le utilis√©
          example: "llama-3"
        
        choices:
          type: array
          description: Liste des choix g√©n√©r√©s (toujours 1 √©l√©ment dans FilAgent)
          items:
            type: object
            required:
              - index
              - message
              - finish_reason
            properties:
              index:
                type: integer
                description: Index du choix (toujours 0)
                example: 0
              
              message:
                type: object
                required:
                  - role
                  - content
                properties:
                  role:
                    type: string
                    enum: [assistant]
                    example: assistant
                  content:
                    type: string
                    description: R√©ponse g√©n√©r√©e par l'agent
                    example: "Voici un algorithme de tri rapide en Python..."
              
              finish_reason:
                type: string
                enum: [stop, length, tool_calls, error]
                description: |
                  Raison de fin de g√©n√©ration:
                  - `stop`: G√©n√©ration termin√©e naturellement
                  - `length`: Limite max_tokens atteinte
                  - `tool_calls`: Arr√™t pour ex√©cution d'outils
                  - `error`: Erreur pendant la g√©n√©ration
                example: stop
              
              tools_used:
                type: array
                description: Liste des outils ex√©cut√©s pendant la g√©n√©ration
                items:
                  type: string
                  enum: [python_sandbox, file_read, math_calculator]
                example: [python_sandbox]
        
        usage:
          type: object
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
          properties:
            prompt_tokens:
              type: integer
              description: Nombre de tokens dans le prompt
              example: 30
            completion_tokens:
              type: integer
              description: Nombre de tokens g√©n√©r√©s
              example: 150
            total_tokens:
              type: integer
              description: Total des tokens utilis√©s
              example: 180
    
    ConversationHistory:
      type: object
      required:
        - conversation_id
        - messages
      properties:
        conversation_id:
          type: string
          description: Identifiant de la conversation
          example: "conv-12345"
        
        messages:
          type: array
          description: Liste chronologique des messages
          items:
            type: object
            required:
              - role
              - content
              - timestamp
            properties:
              role:
                type: string
                enum: [user, assistant]
                example: user
              
              content:
                type: string
                description: Contenu du message
                example: "Bonjour"
              
              task_id:
                type: string
                description: Task ID associ√© (si sp√©cifi√©)
                example: "task-001"
              
              timestamp:
                type: string
                format: date-time
                description: Horodatage ISO8601
                example: "2025-10-27T21:39:00.000Z"
              
              message_type:
                type: string
                enum: [text]
                description: Type de message
                default: text
              
              metadata:
                type: object
                description: M√©tadonn√©es additionnelles
                additionalProperties: true
                example:
                  tokens_used: 25
                  tools_used: ["python_sandbox"]
    
    # ==================== Health Schemas ====================
    
    BasicHealthResponse:
      type: object
      required:
        - service
        - version
        - status
      properties:
        service:
          type: string
          description: Nom du service
          example: FilAgent
        version:
          type: string
          description: Version du service
          pattern: '^\d+\.\d+\.\d+$'
          example: "0.1.0"
        status:
          type: string
          enum: [running]
          description: Statut du service
          example: running
    
    DetailedHealthResponse:
      type: object
      required:
        - status
        - timestamp
        - components
      properties:
        status:
          type: string
          enum: [healthy, degraded]
          description: |
            Statut global du service:
            - `healthy`: Tous les composants op√©rationnels
            - `degraded`: Au moins un composant d√©faillant
          example: healthy
        
        timestamp:
          type: string
          format: date-time
          description: Timestamp ISO8601 du health check
          example: "2025-10-27T21:39:00.000Z"
        
        components:
          type: object
          required:
            - model
            - database
            - logging
          description: Statut d√©taill√© de chaque composant critique
          properties:
            model:
              type: boolean
              description: |
                Mod√®le LLM charg√© et pr√™t √† g√©n√©rer.
                **False** si: mod√®le non charg√©, erreur d'initialisation
              example: true
            
            database:
              type: boolean
              description: |
                Connexion SQLite op√©rationnelle pour m√©moire √©pisodique.
                **False** si: fichier DB corrompu, permissions insuffisantes
              example: true
            
            logging:
              type: boolean
              description: |
                Syst√®me de logging (EventLogger + WormLogger) fonctionnel.
                **False** si: directories de logs inaccessibles
              example: true
    
    # ==================== Error Schemas ====================
    
    ErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          description: Message d'erreur d√©taill√©
          example: "Agent error: Generation timeout after 60s"
        
        error_code:
          type: string
          description: Code d'erreur machine-readable (optionnel)
          example: "GENERATION_TIMEOUT"
        
        trace_id:
          type: string
          description: Trace ID pour debugging (si disponible)
          example: "9b1d1f2a3c4d5e6f"
    
    # ==================== Compliance Components (Document√©s) ====================
    
    DecisionRecord:
      type: object
      description: |
        **Decision Record (DR)** - Enregistrement sign√© d'une d√©cision automatis√©e.
        
        Conforme √† l'article 6.1 de la Loi 25 (Qu√©bec) et article 22 du RGPD.
        Chaque DR est sign√© avec EdDSA (Ed25519) pour garantir l'authenticit√©.
        
        **G√©n√©ration automatique** pour:
        - Utilisation d'outils (write_file, delete_file, execute_code)
        - Actions significatives d√©tect√©es dans la r√©ponse
        - D√©cisions ayant un impact utilisateur
      required:
        - dr_id
        - ts
        - actor
        - task_id
        - decision
        - signature
      properties:
        dr_id:
          type: string
          description: Identifiant unique du Decision Record
          pattern: '^DR-\d{8}-[a-f0-9]{6}$'
          example: "DR-20251027-abc123"
        
        ts:
          type: string
          format: date-time
          description: Timestamp ISO8601 de la d√©cision
          example: "2025-10-27T21:39:00.000Z"
        
        actor:
          type: string
          description: Acteur ayant pris la d√©cision
          example: "agent.core"
        
        task_id:
          type: string
          description: ID de la t√¢che associ√©e
          example: "task-001"
        
        policy_version:
          type: string
          description: Version des politiques appliqu√©es
          example: "policies@0.1.0"
        
        model_fingerprint:
          type: string
          description: Hash du mod√®le utilis√© pour reproductibilit√©
          example: "sha256:abc123..."
        
        prompt_hash:
          type: string
          description: Hash SHA256 du prompt
          example: "sha256:def456..."
        
        decision:
          type: string
          description: D√©cision prise par l'agent
          example: "execute_python_code"
        
        tools_used:
          type: array
          items:
            type: string
          description: Outils ex√©cut√©s
          example: ["python_sandbox"]
        
        reasoning_markers:
          type: array
          items:
            type: string
          description: Marqueurs de raisonnement
          example: ["plan:3-steps", "constraints:jsonschema:v2"]
        
        alternatives_considered:
          type: array
          items:
            type: string
          description: Alternatives envisag√©es
          example: ["do_nothing", "ask_clarification"]
        
        constraints:
          type: object
          additionalProperties: true
          description: Contraintes appliqu√©es
          example:
            timeout_s: 30
            max_tokens: 800
        
        expected_risk:
          type: array
          items:
            type: string
          description: Risques anticip√©s
          example: ["path_traversal:low", "pii_leak:low"]
        
        signature:
          type: string
          description: Signature EdDSA (Ed25519) du DR
          pattern: '^ed25519:[a-f0-9]+$'
          example: "ed25519:a1b2c3d4e5f6..."
    
    ProvenanceGraph:
      type: object
      description: |
        **Graphe de Provenance W3C PROV-JSON**
        
        M√©tadonn√©es de tra√ßabilit√© compl√®te selon le standard W3C PROV.
        Chaque g√©n√©ration produit un graphe liant:
        - **Entities**: Artefacts (prompts, r√©ponses, fichiers)
        - **Activities**: Processus (g√©n√©ration, ex√©cution d'outils)
        - **Agents**: Acteurs (agent, outils, utilisateur)
        - **Relations**: Liens de d√©rivation et attribution
        
        **Storage**: `logs/traces/otlp/prov-{task_id}.json`
      required:
        - entity
        - activity
        - agent
      properties:
        entity:
          type: object
          description: Entit√©s (artefacts g√©n√©r√©s)
          additionalProperties:
            type: object
            properties:
              prov:label:
                type: string
              hash:
                type: string
          example:
            "response:task-001":
              "prov:label": "Response JSON"
              hash: "sha256:abc123..."
        
        activity:
          type: object
          description: Activit√©s (processus)
          additionalProperties:
            type: object
            properties:
              prov:type:
                type: string
              prov:startTime:
                type: string
                format: date-time
              prov:endTime:
                type: string
                format: date-time
          example:
            "gen:task-001":
              "prov:type": "generation"
              "prov:startTime": "2025-10-27T21:39:00.000Z"
              "prov:endTime": "2025-10-27T21:39:05.000Z"
        
        agent:
          type: object
          description: Agents (acteurs)
          additionalProperties:
            type: object
            properties:
              prov:type:
                type: string
              version:
                type: string
          example:
            "agent:llmagenta":
              "prov:type": "softwareAgent"
              version: "0.1.0"
        
        wasGeneratedBy:
          type: array
          description: Relations de g√©n√©ration
          items:
            type: object
            properties:
              prov:entity:
                type: string
              prov:activity:
                type: string
        
        wasAssociatedWith:
          type: array
          description: Relations d'association
          items:
            type: object
            properties:
              prov:activity:
                type: string
              prov:agent:
                type: string
    
    EventLog:
      type: object
      description: |
        **Event Log JSONL** - √âv√©nement structur√© compatible OpenTelemetry
        
        Chaque ligne dans `logs/events/events-YYYY-MM-DD.jsonl` est un √©v√©nement.
        Format compatible avec les outils d'observabilit√© standard (Jaeger, Zipkin).
        
        **Append-only**: Les logs sont √©crits via WormLogger pour garantir l'immuabilit√©.
      required:
        - ts
        - trace_id
        - span_id
        - level
        - actor
        - event
      properties:
        ts:
          type: string
          format: date-time
          description: Timestamp ISO8601
          example: "2025-10-27T21:39:00.431Z"
        
        trace_id:
          type: string
          description: Trace ID pour corr√©lation distribu√©e
          pattern: '^[a-f0-9]{16}$'
          example: "9b1d1f2a3c4d5e6f"
        
        span_id:
          type: string
          description: Span ID pour hi√©rarchie de traces
          pattern: '^[a-f0-9]{8}$'
          example: "e21a3c5d"
        
        level:
          type: string
          enum: [DEBUG, INFO, WARNING, ERROR]
          description: Niveau de log
          example: INFO
        
        actor:
          type: string
          description: Acteur √©metteur de l'√©v√©nement
          example: "agent.core"
        
        event:
          type: string
          description: Type d'√©v√©nement
          enum:
            - conversation.start
            - conversation.end
            - tool.call
            - generation.complete
            - dr.created
            - pii.detected
          example: "tool.call"
        
        conversation_id:
          type: string
          description: ID de la conversation
          example: "conv-12345"
        
        task_id:
          type: string
          description: ID de la t√¢che
          example: "task-001"
        
        metadata:
          type: object
          description: M√©tadonn√©es additionnelles
          additionalProperties: true
          example:
            tool_name: "python_sandbox"
            success: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        **JWT Token** pour authentification (non impl√©ment√© dans MVP).
        
        √Ä impl√©menter pour production avec:
        - Rotation des secrets
        - Scopes RBAC dans le payload
        - Expiration courte (15min) + refresh token

security:
  - {}  # Pas d'authentification dans MVP (localhost uniquement)
  # Pour production, d√©commenter:
  # - BearerAuth: []
